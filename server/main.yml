- hosts: all
  pre_tasks:
    - name: Update Cache
      apt:
        update_cache: yes
      tags:
        - core
        - iptables
        - docker

    - name: Wait for sudo
      become: yes
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

  tasks:
    - import_tasks: tasks/core.yml
    - import_tasks: tasks/iptables.yml
    - import_tasks: tasks/docker.yml

- name: Install Kubernetes
  hosts: all
  tasks:
    - name: Install dependencies
      become: yes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Ensure /etc/apt/keyrings directory exists
      become: yes
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present

    - name: Update apt package index
      become: yes
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages at current version
      become: yes
      shell: |
        apt-mark hold kubelet kubeadm kubectl
    
    - name: Restart containerd service
      become: yes
      shell: |
        rm /etc/containerd/config.toml && systemctl restart containerd.service

- name: Init Kubernetes Master
  hosts: jump-server
  gather_facts: False
  tasks:
    - name: Initialize Kubernetes Master
      command: kubeadm init --control-plane-endpoint={{ hostvars[groups['jump-server'][0]].public_ip }} --upload-certs --pod-network-cidr=172.16.0.0/16
      register: kubeadm_init

    - name: Create .kube directory
      become: yes
      file:
        path: /root/.kube
        state: directory
        mode: 0700

    - name: Copy admin.conf to root's kube config
      become: yes
      shell: |
        mkdir -p /root/.kube
        cp -i /etc/kubernetes/admin.conf /root/.kube/config
        chown root:root /root/.kube/config
        export KUBECONFIG=/etc/kubernetes/admin.conf

    - name: Copy admin.conf to ansible user's kube config
      become: yes
      shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Get Certificate Key
      command: kubeadm init phase upload-certs --upload-certs
      register: cert_key
      changed_when: False

    - name: Get Join Command for Control Plane Nodes
      command: kubeadm token create --print-join-command --certificate-key {{ cert_key.stdout_lines[-1] }}
      register: join_command_cp

    - name: Get Join Command for Worker Nodes
      command: kubeadm token create --print-join-command
      register: join_command_worker

    - name: Save Join Commands
      set_fact:
        join_command_cp: "{{ join_command_cp.stdout }}"
        join_command_worker: "{{ join_command_worker.stdout }}"

- name: Join Additional Masters
  hosts: masters
  gather_facts: False
  tasks:
    - name: Join Master Nodes
      command: "{{ hostvars[groups['jump-server'][0]].join_command_cp }} --control-plane"
      register: master_join

    - name: Show Results
      debug: var=master_join.stdout

    - name: Show Errors
      debug: var=master_join.stderr

- name: Join Kubernetes Cluster
  hosts: workers
  gather_facts: False
  tasks:
    - name: Join Kubernetes Cluster as a Worker
      command: "{{ hostvars[groups['jump-server'][0]].join_command_worker }}"
      register: worker_join

    - name: Show Results
      debug: var=worker_join.stdout

    - name: Show Errors
      debug: var=worker_join.stderr

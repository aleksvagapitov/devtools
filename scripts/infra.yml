version: "3.7"

services:
  registry:
    image: registry:2.7
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
         condition: on-failure
      placement:
        constraints: 
          - node.role==manager
    ports:
      - 55000:5000
    volumes:
      - registry:/var/lib/registry
    networks:
      - infrastructure

  traefik:
    image: traefik:2.9
    command:
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.swarmModeRefreshSeconds=15s"
      - "--providers.docker.network=infrastructure"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=mail@aleksvagapitov.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # - "--metrics.prometheus=true"
      # - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/etc/traefik/acme
    networks:
      - infrastructure
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # Traefik URL (replace with yours) 
        - 'traefik.http.routers.dashboard.rule=Host(`traefik.aleksvagapitov.com`)' # Put in your domain
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
        - "traefik.http.routers.dashboard.tls=true"
        - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
        - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
        - "traefik.http.routers.dashboard.middlewares=authtraefik"
        # Basic Authentication for Traefik Dashboard
        # Username: traefikadmin (replace with yours)
        # Passwords must be encoded using MD5, SHA1, or BCrypt https://hostingcanada.org/htpasswd-generator/
        # - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$2y$$10$$sMzJfirKC75x/hVpiINeZOiSm.Jkity9cn4KwNkRvO7hSQVFc5FLO"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  jenkins:
    image: my-registry:55000/jenkins
    user: root
    ports:
      - 8080
      - 50000
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
         condition: on-failure
      placement:
        constraints: 
          - node.role==manager
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.jenkins.rule=Host(`jenkins.aleksvagapitov.com`)' # Put in your domain
        - 'traefik.http.routers.jenkins.entrypoints=websecure'
        - 'traefik.http.routers.jenkins.tls.certresolver=letsencrypt'
        - 'traefik.http.routers.jenkins.service=jenkinsservice'
        - 'traefik.http.services.jenkinsservice.loadbalancer.server.port=8080' # Required in swarms, https://doc.traefik.io/traefik/v2.0/routing/providers/docker/#services
    healthcheck:
      test: ["CMD-SHELL", "curl -sS http://localhost:8080/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - infrastructure

  portainer:
    image: portainer/portainer:1.20.0
    command: -H unix:///var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: 
          - node.role==manager
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.portainer.rule=Host(`portainer.aleksvagapitov.com`)' # Put in your domain
        - 'traefik.http.routers.portainer.entrypoints=websecure'
        - 'traefik.http.routers.portainer.tls.certresolver=letsencrypt'
        - 'traefik.http.routers.portainer.service=portainetservice'
        - 'traefik.http.services.portainetservice.loadbalancer.server.port=9000' # Required in swarms, https://doc.traefik.io/traefik/v2.0/routing/providers/docker/#services
    ports:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - portainer_data:/data
    networks:
      - infrastructure

  agent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
      AGENT_PORT: 9001
      LOG_LEVEL: DEBUG
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - infrastructure
    deploy:
      mode: global
    
networks:
  infrastructure: 
    driver: overlay
    external: true
    attachable: true

volumes:
  registry:
  jenkins_home:
  portainer_data:
  letsencrypt:
